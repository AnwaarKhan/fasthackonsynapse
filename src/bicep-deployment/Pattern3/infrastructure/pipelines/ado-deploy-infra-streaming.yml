# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: sqlserveradminpassword
  type: string
- name: objectIDofServicePrincipal
  type: string




variables:
    # 'develop' or feature branches: DEV environment
    - template: ../../config-infra-dev-streaming.yml

trigger:
- none

pool:
  vmImage: $(ap_vm_image)

stages :
  - stage: Lint
    displayName: Lint and Preflight check. Details- https://docs.microsoft.com/en-us/training/modules/test-bicep-code-using-azure-pipelines/3-lint-validate-bicep-code?pivots=powershell
    jobs:
    - job: LintBicep
      displayName: Lint Bicep Code
      steps:
        - checkout: self
        - script: |
            az bicep build --file ./src/bicep-deployment/Pattern3/infrastructure/main.bicep
          name: LintBicepCode
          displayName: Run Bicep Linter

  - stage: PreflightValidation
    jobs:
    - job: ValidateBicepCode
      displayName: Validate Bicep Code
      steps:
        - task: AzureCli@2
          name: RunPreflightValidateion
          displayName: Run Preflight Validation
          inputs:
            azureSubscription: $(ado_service_connection_rg)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo $(Build.DefinitionName)
              echo $(location)
              echo $(prefix)
              echo $(postfix)
              echo $(environment)
              az deployment sub validate \
                --name $(Build.DefinitionName) \
                --template-file ./src/bicep-deployment/Pattern3/infrastructure/main.bicep \
                --location $(location) \
                --parameters location=$(location) prefix=$(prefix) postfix=$(postfix) env=$(environment) objectID=${{ parameters.objectIDofServicePrincipal }} sqladministratorLoginPassword=${{ parameters.sqlserveradminpassword }}

  - stage: CheckOutBicepAndDeployAzureResources
    displayName: Deploy Azure Resources
    jobs:
    - deployment: DevDeployBicep
      displayName: Deploy Infra
      pool:
        vmImage: $(ap_vm_image)
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureCLI@2
              displayName: Running Dev Deployment
              inputs:
                azureSubscription: $(ado_service_connection_rg)
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  az --version
                  echo "deploying bicep..."
                  az deployment sub create \
                    --name $(Build.DefinitionName) \
                    --location $(location) \
                    --template-file ./src/bicep-deployment/Pattern3/infrastructure/main.bicep \
                    --parameters location=$(location) prefix=$(prefix) postfix=$(postfix) env=$(environment) objectID=${{ parameters.objectIDofServicePrincipal }} sqladministratorLoginPassword=${{ parameters.sqlserveradminpassword }}
  # Depoloy Azure Function APP
  - stage: BuildAzureFunctionAPP
    displayName: Build Azure Function App
    jobs:
    - deployment: DevBuildAzFunction
      displayName: Build Azure Function App
      pool:
        vmImage: $(ap_vm_image_ubuntu)
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: UsePythonVersion@0
              displayName: 'Use Python 3.7'
              inputs:
                versionSpec: 3.7 

            - bash: |
                pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
              workingDirectory: '$(System.DefaultWorkingDirectory)/src/bicep-deployment/Pattern3/src/EventGeneratorApp'
              displayName: 'Install application dependencies'
            - task: ArchiveFiles@2
              displayName: 'Archive files'
              inputs:
                rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src/bicep-deployment/Pattern3/src/EventGeneratorApp'
                includeRootFolder: false
                archiveType: zip
                archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
                replaceExistingArchive: true
            - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              artifact: drop

  - stage: DeployAzFunctionApp
    displayName: Deploy Azure Function
    dependsOn: BuildAzureFunctionAPP
    condition: succeeded()

    jobs:
    - deployment: DeployAzFunctionApp
      displayName: Deploy Azure Function App
      environment: $(environment)
      pool:
        vmImage: $(ap_vm_image_ubuntu)

      strategy:
        runOnce:
          deploy:

            steps:
            - task: AzureFunctionApp@1
              displayName: 'Azure functions app deploy'
              inputs:
                azureSubscription: '$(ado_service_connection_rg)'
                appType: functionAppLinux
                appName: $(functionAppName)
                package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

  - stage: SynapseArtifactsDeployment
    displayName: Synapse pipelines/notebook/linkedservices/dataset deployment
    jobs:
    - job: _job_SynapseArtifactsDeployment
      displayName: synapse artifacts deployment
      steps:
      - checkout: self
      - task: AzureSynapseWorkspace.synapsecicd-deploy.synapse-deploy.Synapse workspace deployment@1
        displayName: 'Synapse deployment task for workspace: $(synapseWorkspace) '
        inputs:
          TemplateFile: '$(System.DefaultWorkingDirectory)/src/bicep-deployment/Pattern3/workspace_publish_pattern_3/TemplateForWorkspace.json'
          ParametersFile: '$(System.DefaultWorkingDirectory)/src/bicep-deployment/Pattern3/workspace_publish_pattern_3/TemplateParametersForWorkspace.json'
          azureSubscription: $(ado_service_connection_rg)
          ResourceGroupName: $(resourceGroupName)
          TargetWorkspaceName: $(synapseWorkspace)
          OverrideArmParameters: '-workspaceName $(synapseWorkspace)            -LS_datalake_properties_typeProperties_url "https://$(dataLakeAccountName).dfs.core.windows.net"           -LS_KeyVault_properties_typeProperties_baseUrl "https://$(keyVaultName).vault.azure.net" -LS_AZFunction_properties_typeProperties_functionAppUrl "https://$(functionAppname).azurewebsites.net"'